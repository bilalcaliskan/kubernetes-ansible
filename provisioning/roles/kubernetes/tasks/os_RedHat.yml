---

- name: import variables
  include_vars: "os_{{ ansible_facts['os_family'] }}.yml"
  tags:
  - import
  - kubernetes

- name: start of task debug message
  debug:
    msg: "kubernetes role is starting for {{ inventory_hostname }}"
  tags: kubernetes

- name: remove swapfile
  mount:
    name: swap
    fstype: swap
    state: absent
  register: remove_fstab_result
  tags: preparation

- name: disable swap
  command: swapoff -a
  register: disable_swap_result
  when: 
  - ansible_swaptotal_mb > 0
  - remove_fstab_result is succeeded
  tags: preparation

- name: add Kubernetes' yum repository
  yum_repository:
    name: kubernetes
    description: Kubernetes YUM repository
    baseurl: "{{ k8s_base_url }}"
    gpgkey: "{{ k8s_yum_key }} {{ k8s_rpm_key }}"
    gpgcheck: yes
  tags: kubernetes

- name: install k8s packages
  yum:
    name: "{{ item }}-{{ k8s_version }}"
    state: present
  loop: "{{ k8s_packages }}"
  notify: start and enable docker and kubelet
  tags: kubernetes


- name: initialize the cluster
  command: "kubeadm init --apiserver-advertise-address={{ k8s_master_ip }} --pod-network-cidr={{ k8s_pod_subnet }} --ignore-preflight-errors=SystemVerification >> {{ output_file }}"
  when: "inventory_hostname in groups['masters'][0]"
  register: init_result
  tags: kubernetes

- name: create .kube directory
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755
  when: 
  - init_result is succeeded
  - "inventory_hostname in groups['masters']"
  tags: kubernetes

- name: copy admin.conf to user's kube config
  copy:
    src: "{{ k8s_src_conf_path }}"
    dest: "{{ k8s_dst_conf_path }}"
    remote_src: yes
    owner: root
  when: "inventory_hostname in groups['masters']"
  tags: kubernetes

- name: pause for 10 seconds
  pause:
    prompt: Pausing 10 seconds before initializing pod network...
    seconds: 10
  tags: kubernetes

- name: install pod network
  shell: "kubectl apply -f {{ flannel_url }} >> pod_network_setup.txt"
  args:
    chdir: $HOME
    creates: pod_network_setup.txt
  when: "inventory_hostname in groups['masters'][0]"
  register: init_pod_network_result
  tags: kubernetes

- name: get join command
  shell: kubeadm token create --print-join-command
  register: join_command_result
  when: "inventory_hostname in groups['masters'][0]"
  tags: kubernetes

- name: set join command
  set_fact:
    join_command: "{{ join_command_result.stdout_lines[0] }}"
  when: "inventory_hostname in groups['masters'][0]"
  tags: kubernetes

- name: join cluster
  shell: "{{ hostvars[item].join_command }} --ignore-preflight-errors=SystemVerification >> node_joined.txt"
  args:
    chdir: $HOME
    creates: node_joined.txt
  when: "inventory_hostname in groups['workers']"
  with_items:
  - kubemaster01
  tags: kubernetes

