---

- name: Start of tasks debug message
  debug:
    msg: "Starting preparation role tasks for {{ inventory_hostname }}"

- name: Include variables
  include_vars: "os_{{ ansible_facts['os_family'] }}.yml"

- name: Add IP address of all hosts to "{{ hosts_file_path }}" file
  lineinfile:
    dest: "{{ hosts_file_path }}"
    line: "{{ hostvars[item]['ansible_eth1']['ipv4']['address'] }} {{ item }}"
    state: present
  loop: "{{ groups['kubernetes-cluster'] }}"

- name: Ensure a list of packages installed with optimal way(can be used on apt and yum modules)
  yum:
    name: "{{ required_packages }}"
    state: present
  #loop: "{{ required_packages }}"
  register: install_result

- name: Disable selinux temporarily
  selinux:
    state: disabled
  register: selinux_tmp_result

- name: Copy selinux config file to the remote location
  copy:
    src: "{{ selinux_config_src_path }}"
    dest: "{{ selinux_config_dst_path }}"
    owner: root
    group: root
    backup: yes
    mode: 0644
  register: selinux_perm_result
  when: selinux_tmp_result is succeeded

# enable br_netfilter kernel module to allow kubernetes pods to communicate across the cluster
- name: Enable br_netfilter
  modprobe:
    name: br_netfilter
    state: present

- name: Ensure net.bridge.bridge-nf-call-ip6tables is set to 1
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: 1
    state: present

- name: Ensure net.bridge.bridge-nf-call-iptables is set to 1
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    state: present

- name: Check if "{{ fstab_path }}" exists
  stat:
    path: "{{ fstab_path }}"
  register: stat_result

- name: Remove current swaps from fstab
  lineinfile:
    dest: "{{ fstab_path }}"
    regexp: '^/[\S]+\s+none\s+swap '
    state: absent
  when: stat_result.stat.exists == true

- name: Disable swap
  command: swapoff --all
  ignore_errors: yes

- name: Disable service firewalld and ensure it is masked
  systemd:
    name: firewalld
    enabled: no
    masked: yes

- name: Set timezone with preferred default zone value {{ timezone }}
  file:
    src: "{{ zone_file_src_path }}"
    dest: "{{ zone_file_dest_path }}"
    owner: root
    group: root
    state: link
  register: set_timezone_result
  # reboot the hosts in all cases
  changed_when: true
  notify: reboot hosts

- name: End of tasks debug message
  debug:
    msg: "All preparation role tasks completed successfully for {{ inventory_hostname }}"
  when: (reboot_result is defined and reboot_result is succeeded) or set_timezone_result is succeeded
